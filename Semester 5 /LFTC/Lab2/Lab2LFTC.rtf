{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww18000\viewh7000\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs36 \cf0 Github repo:https://github.com/cs-ubbcluj-ro/lab-work-computer-science-2024-iuliamariagroza/tree/main/2-Finite-Automata\
\
Documentation:\
The Symbol Table is composed of 2 separate hash tables, one for identifiers and one for constants. The hash table uses separate chaining method to solve collision problems which is done by storing multiple elements of the same hash value in a list. Each element from the symbol table has as its position a pair of 2 values: the has value(the index) and the position within the list at that index. There are 2 hash functions for each of the types: integers and strings. The integer hash function is the value of the element modulo the size of the list while the hash function for the strings is calculated by summing the ASCII values of the characters in the string and then taking the result modulo the size of the list. \
\
Operations for each class:\
1.Hash table \
  a. int generateHashForIntegers(int key) \
                    \'97> generates the hash value for the integers\
  b. int generateHashForStrings(string key) \
                   \'97> generates the hash value for the strings\
  c. boolean containsElement(T key) \
                   \'97> returns true if a given key exists in the hash table, false otherwise\
  d. int computeHashValue(T key) \
                   \'97> determines which has function to use depending on the type of key\
  e.add(T key) \
                   \'97> inserts a key into the hash table and returns a pair containing the hash value and the position within the list of that hash value\
  f. getPosition(T key) \
                  \'97> returns the position of a key if found, -1 if not\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0   g. toString()\
                 \'97> provides a readable representation of the hash table\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
2. Pair\
  a. getFirstElement() \
                  \'97> returns the first element of the pair\
  b. getSecondElement()\
                  \'97>returns the second element of the pair\
 c. toString()\
                 \'97> provides a readable representation of the pairs\
\
3.Symbol table\
  a. addIdentifier(string identifier) \
               \'97> adds an identifier to the symbol table \
  b. addConstant(string constant) \
         \'97> adds a constant to the symbol table\
 c. boolean containsIdentifier()\
             \'97> checks if an identifier exists in the symbol table\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  d. boolean containsConstant()\
             \'97> checks if a constant exists in the symbol table\
 e. findIdentifierPosition(string identifier)\
             \'97> returns the position of the identifier in the symbol table\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  f. findConstantPosition(string identifier)\
             \'97> returns the position of the constant in the symbol table\
g. toString()\
                 \'97> provides a readable representation of the symbol table\
}